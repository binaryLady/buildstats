{"name":"Buildstats","tagline":"Data Visualization Tools Using D3","body":"This project was created to replace the Excel examination of code testing stats. I used d3.js to create the visualizations. The data is streaming from an Apache SQL server. Data structures are created using object orientated JS.\r\n\r\n/* Created by SCookBroen on 1/29/14.\r\n */\r\n\r\n\r\nvar custom_bubble_chart;\r\ncustom_bubble_chart = (function (d3, CustomTooltip) {\r\n\r\n    \"use strict\";\r\n    var mNodes;\r\n    var viewType;\r\n    //a global date variable\r\n    var currentNodes,\r\n        test,\r\n//    var width = 900,\r\n//        height = 900,\r\n        tooltip = CustomTooltip(\"custom_tooltip\", 240),\r\n        l_nodes = [];\r\n    var margin = {top: 40, right: 20, bottom: 50, left: 200},\r\n        width = 700 - margin.left - margin.right,\r\n        height = 700 - margin.top - margin.bottom,\r\n        mDate,\r\n        mGroup,\r\n        yAxis,\r\n        xAxis,\r\n        tip,\r\n        tip2,\r\n        bars,\r\n        xAxe,\r\n        yAxe,\r\n        grid,\r\n        grid2,\r\n        currGroup,\r\n        grid3,\r\n        grid4,\r\n        format = d3.time.format(\"%B-%d-%Y\"),\r\n        padding = 3, // separation between same-color nodes\r\n        currentDate = 0,\r\n        sixMos = 0,\r\n        colorNodes,\r\n        oneYear = 0;\r\n    var nodes;\r\n    var bars;\r\n\r\n    var x,\r\n        y,\r\n        dat = [],\r\n        ext;\r\n\r\n    var textBox = d3.select(\"#vis\")\r\n        .append(\"div\")\r\n        .attr(\"id\",\"dateHolder\")\r\n        .attr(\"width\",200)\r\n        .attr(\"height\",400);\r\n    var svg = d3.select(\"#vis\").append(\"svg\")\r\n        .attr(\"width\", width + margin.left + margin.right)\r\n        .attr(\"height\", height + margin.top + margin.bottom)\r\n        .append(\"g\")\r\n        .attr(\"transform\",\r\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n    function custom_chart(data) {\r\n\r\n        //create nodes from original data\r\n        data.forEach(function (d) {\r\n\r\n\r\n            var l_node = new Node();\r\n            l_node.name = d.Application,\r\n                l_node.colors = d.colors,\r\n                l_node.app_group = d.app_group,\r\n                l_node.line_total = +d.line_total,\r\n                l_node.line_percent = +d.line_percent,\r\n                l_node.line_tested = +d.line_tested,\r\n                l_node.pass = +d.pass,\r\n                l_node.date = d.date;\r\n\r\n            l_nodes.push(l_node);\r\n            dat.push(new Date(d.date));\r\n        });\r\n\r\n        //Get the min and max date\r\n        ext = d3.extent(dat);\r\n        currentNodes = l_nodes;\r\n        createGroupNodes();\r\n        getColors(l_nodes);\r\n        instructions();\r\n        dateMenu();\r\n        //store the nodes\r\n\r\n    }\r\n    function instructions() {\r\n        textBox\r\n            .append(\"g\").append(\"text\").text(\"This is a drillable barchart showing the automated testing totals with a three date comparison.\" +\r\n                \"Click on the bars to drill-down. Choose from the date menu to compare different dates.\").attr(\"class\", \"info\");\r\n    }\r\n    //TODO Color Function\r\n    function getColors(nodes) {\r\n        colorNodes = d3.nest()\r\n            .key(function (d) {\r\n                return d.app_group;\r\n            })\r\n            .key(function (d) {\r\n                return d.colors;\r\n            })\r\n            .map(nodes);\r\n        colorNodes = d3.entries(colorNodes);\r\n        console.log(colorNodes);\r\n\r\n    }\r\n    function currDate() {\r\n        textBox.selectAll(\".info\").remove();\r\n        textBox.selectAll(\".one\").remove();\r\n        currentDate = this.innerHTML;\r\n        textBox\r\n            .append(\"g\").append(\"text\").text(\"Date 1 \" + currentDate).attr(\"class\", \"one dates\").attr(\"x\", width + 150).attr(\"y\", 95);\r\n\r\n    }\r\n\r\n    function sixM() {\r\n        textBox.selectAll(\".info\").remove();\r\n        textBox.selectAll(\".two\").remove();\r\n        sixMos = this.innerHTML;\r\n        textBox\r\n            .append(\"g\").append(\"text\").text(\"Date 2 \" + sixMos).attr(\"class\", \"two dates\").attr(\"x\", width+ 150).attr(\"y\", 110);\r\n\r\n    }\r\n\r\n    function oneY() {\r\n        textBox.selectAll(\".info\").remove();\r\n        textBox.selectAll(\".three\").remove();\r\n        oneYear = this.innerHTML;\r\n        textBox\r\n            .append(\"g\").append(\"text\").text(\"Date 3 \" + oneYear).attr(\"class\", \"three dates\").attr(\"x\", width +150).attr(\"y\", 125);\r\n    }\r\n    function createAllNodes(nodes) {\r\n\r\n\r\n        var mCurrentNodes = d3.nest()\r\n            .key(function (d) {\r\n                return d.app_group;\r\n            })\r\n            .key(function (d) {\r\n                return d.name;\r\n            })\r\n            .rollup(function (leaves) {\r\n                return {\r\n                    \"total\": d3.sum(leaves, function (d) {\r\n                        return d.line_total;\r\n                    }),\r\n                    \"tested\": d3.sum(leaves, function (d) {\r\n                        return d.line_tested;\r\n                    }),\r\n                    \"passed\": d3.sum(leaves, function (d) {\r\n                        return d.pass;\r\n                    }),\r\n                    \"percent\": d3.sum(leaves, function (d) {\r\n                        return d.line_percent;\r\n                    })}\r\n            })\r\n            .sortValues(d3.ascending)\r\n            .sortKeys(d3.ascending)\r\n            .map(nodes, d3.map);\r\n\r\n\r\n        // var key = d3.keys(mCurrentNodes[0]);\r\n        //currentNodes = d3.entries(mCurrentNodes);\r\n        mGroup = d3.keys(mCurrentNodes);\r\n        mDate = d3.keys(mCurrentNodes[mGroup[0]]);\r\n        nodes = d3.entries(mCurrentNodes[currGroup]);\r\n        //nodes = mCurrentNodes;\r\n        //dateMenu(mDate);\r\n\r\n\r\n        return nodes;\r\n    }\r\n    function createDateNodes(nodes) {\r\n\r\n\r\n        var mCurrentNodes = d3.nest()\r\n            .key(function (d) {\r\n                return d.app_group;\r\n            })\r\n            .key(function (d) {\r\n                return d.date.replace(/-/g, \"/\");\r\n            })\r\n            .rollup(function (leaves) {\r\n                return {\r\n                    \"total\": d3.sum(leaves, function (d) {\r\n                        return d.line_total;\r\n                    }),\r\n                    \"tested\": d3.sum(leaves, function (d) {\r\n                        return d.line_tested;\r\n                    }),\r\n                    \"passed\": d3.sum(leaves, function (d) {\r\n                        return d.pass;\r\n                    }),\r\n                    \"percent\": d3.sum(leaves, function (d) {\r\n                        return d.line_percent;\r\n                    })}\r\n            })\r\n            .sortValues(d3.ascending)\r\n            .sortKeys(d3.ascending)\r\n            .map(nodes, d3.map);\r\n\r\n\r\n        // var key = d3.keys(mCurrentNodes[0]);\r\n        //currentNodes = d3.entries(mCurrentNodes);\r\n        mGroup = d3.keys(mCurrentNodes);\r\n        mDate = d3.keys(mCurrentNodes[mGroup[0]]);\r\n        nodes = d3.entries(mCurrentNodes[mGroup[0]]);\r\n        //nodes = mCurrentNodes;\r\n        //dateMenu(mDate);\r\n\r\n     //   console.log(d3.entries(mCurrentNodes));\r\n      //  console.log(nodes);\r\n\r\n        return mCurrentNodes;\r\n    }\r\n\r\n    function createGroupNodes() {\r\n        //Take data and crunch it!\r\n        var nodes = currentNodes;\r\n        var mCurrentNodes = d3.nest()\r\n            .key(function (d) {\r\n                return format(new Date(d.date));\r\n            })\r\n            .key(function (d) {\r\n                return d.app_group + ' ' + format(new Date(d.date));\r\n            })\r\n            .rollup(function (leaves) {\r\n                return {\r\n                    \"total\": d3.sum(leaves, function (d) {\r\n                        return d.line_total;\r\n                    }),\r\n                    \"tested\": d3.sum(leaves, function (d) {\r\n                        return d.line_tested;\r\n                    }),\r\n                    \"passed\": d3.sum(leaves, function (d) {\r\n                        return d.pass;\r\n                    }),\r\n                    \"percent\": d3.sum(leaves, function (d) {\r\n                        return d.line_percent;\r\n                    })}\r\n            })\r\n            .sortValues(d3.ascending)\r\n            .map(nodes, d3.map);\r\n\r\n     //   console.log(\"dates: \" + sixMos + \" \" + oneYear + \" \" + currentDate);\r\n        mDate = d3.keys(mCurrentNodes);\r\n        mDate.sort(function (a, b) {\r\n            var f = moment(a, \"MMMM-DD-YYYY\");\r\n            var g = moment(b, \"MMMM-DD-YYYY\");\r\n            //console.log(\"date:\" + f + \" \" + g);\r\n            return f - g;\r\n        })\r\n        var int1 = mDate.length -1;\r\n        var int2 = (mDate.length-1)/2;\r\n        var int3 = 0;\r\n        if (currentDate === 0) {\r\n            currentDate = mDate[int1];\r\n        }\r\n        if (sixMos === 0) {\r\n            sixMos = mDate[int2];\r\n        }\r\n        if (oneYear === 0) {\r\n            oneYear = mDate[int3];\r\n        }\r\n        mGroup = d3.merge([d3.keys(mCurrentNodes[currentDate]), d3.keys(mCurrentNodes[sixMos]), d3.keys(mCurrentNodes[oneYear])]);\r\n\r\n        mGroup.sort(d3.ascending);\r\n\r\n        //create an array of the nodes we want to use\r\n        //TODO variable-ize the time stamps  to be 6months and one year from most recent with toggle function for the user\r\n\r\n        nodes = d3.entries(mCurrentNodes[currentDate]);\r\n        var nodes2 = d3.entries(mCurrentNodes[sixMos]);\r\n        var nodes3 = d3.entries(mCurrentNodes[oneYear]);\r\n\r\n        test = d3.merge([nodes, nodes2, nodes3]);\r\n\r\n     //   test.sort(d3.ascending);\r\n\r\n     //   console.log(test);\r\n        //   console.log(test);\r\n\r\n        layoutChart()\r\n\r\n    }\r\n    var userFunctionstack = [function (d) {\r\n        return y(d.key);\r\n    } , function (d) {\r\n        return y(d.key) + y.rangeBand() / 3;\r\n    },\r\n        function (d) {\r\n            return y(d.key) + y.rangeBand() / 3 * 2;\r\n        }];\r\n\r\n    var userFunctionstack2 = [function (d) {\r\n        return y(new Date(d.key));\r\n    },\r\n        function (d) {\r\n            return y(new Date(d.key)) + y.rangeBand() / 3;\r\n        },\r\n        function (d) {\r\n            return y(new Date(d.key)) + y.rangeBand() / 3 * 2;\r\n        }, function (d) {\r\n            return drillDeeper(d);\r\n        }];\r\n    //Tool tip holder\r\n    var tiper = d3.select('body')\r\n        .append(\"div\")\r\n        .attr(\"class\", \"tooltip\")\r\n        .style(\"opacity\", 0);\r\n\r\n    function hideTip(){\r\n        tiper.style('opacity', 0);\r\n    }\r\n\r\n    function makeBars(thisData, action, key) {\r\n        var bars = svg.selectAll(\".bar\")\r\n            .data(thisData);\r\n\r\n        bars\r\n            .enter().append(\"rect\")\r\n            .attr(\"class\", \"enter\")\r\n            .style(\"fill\", '#99FF66')\r\n            .attr(\"y\", key[0])\r\n            .attr(\"height\", y.rangeBand())\r\n            .attr(\"x\", 0)\r\n            .attr(\"width\", 0)\r\n            .attr(\"data-legend\", \"Untested Lines\")\r\n            .on(\"click\", action)\r\n            .on(\"mouseover\", function (d) {\r\n                tiper.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n                tiper\r\n                    .transition()\r\n                    .duration(200)\r\n                    .style(\"opacity\", .9)\r\n                tiper.html('<p> Untested Lines: ' +  (d.value.total - d.value.tested) +'</p>')\r\n                    .style(\"left\", (d3.event.pageX) + \"px\")\r\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\r\n            })\r\n            .on(\"mouseout\", hideTip)\r\n\r\n        bars\r\n            .transition()\r\n            .duration(750)\r\n            .attr(\"x\", function(d){\r\n                return x(+d.value.tested)\r\n            })\r\n            .attr(\"width\", function (d) {\r\n                return x((+d.value.total) - (+d.value.tested));\r\n            })\r\n\r\n        bars.exit()\r\n            .remove()\r\n        bars\r\n            .enter().append(\"rect\")\r\n            .attr(\"class\", \"enter\")\r\n            .style(\"fill\", \"#009999\")\r\n            .attr(\"y\", key[0])\r\n            .attr(\"height\", y.rangeBand())\r\n            .attr(\"x\", 0)\r\n            .attr(\"width\", 0)\r\n            .attr(\"data-legend\", \"Tested Lines\")\r\n            .on(\"click\",action)\r\n            .on(\"mouseover\", function (d) {\r\n                tiper.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n                tiper\r\n                    .transition()\r\n                    .duration(200)\r\n                    .style(\"opacity\", .9)\r\n                tiper.html('<p> Tested Lines: ' +  d.value.tested +'</p>')\r\n                    .style(\"left\", (d3.event.pageX) + \"px\")\r\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\r\n            })\r\n            .on(\"mouseout\", hideTip)\r\n        bars\r\n            .transition()\r\n            .duration(750)\r\n            .attr(\"x\",0)\r\n            .attr(\"width\", function (d) {\r\n                return x(+d.value.tested);\r\n            })\r\n        bars.exit()\r\n            .remove();\r\n\r\n\r\n    }\r\n\r\n        function layoutChart() {\r\n        svg.selectAll(\".group\").remove();\r\n        svg.selectAll(\".dates\").remove();\r\n        svg.selectAll(\".grid\").remove();\r\n        svg.selectAll(\".legend\").remove();\r\n        svg.selectAll(\".exit\").transition().duration(750).ease(\"linear\").attr(\"width\", 0).attr(\"x\", 0).each(\"end\", function () {\r\n            d3.select(this).remove();\r\n        });\r\n        svg.selectAll(\".enter\").transition().duration(750).ease(\"linear\").attr(\"width\", 0).attr(\"x\", 0).each(\"end\", function () {\r\n            d3.select(this).remove();\r\n        });\r\n        svg.selectAll(\".labels\").remove();\r\n        //svg.selectAll(\".x axis\").remove();\r\n        svg.selectAll(\".tick\").remove();\r\n\r\n        y = d3.scale.ordinal().rangeRoundBands([height, 0], .05);\r\n        x = d3.scale.linear().range([0, width]);\r\n\r\n        test.sort(function (a, b) {\r\n            var akey = a.key.toLowerCase(), bkey = b.key.toLowerCase();\r\n            if (akey < bkey)\r\n                return -1\r\n            if (akey > bkey)\r\n                return 1\r\n            return 0;\r\n        })\r\n\r\n        svg.append(\"g\").append(\"text\").text(\"Automated Testing All WEX\" ).attr(\"class\", \"group\");\r\n\r\n        function make_x_axis() {\r\n            return d3.svg.axis()\r\n                .scale(x)\r\n                .orient(\"bottom\")\r\n            // .ticks(\"\")\r\n        }\r\n\r\n        function make_y_axis() {\r\n            return d3.svg.axis()\r\n                .scale(y)\r\n                .orient(\"left\")\r\n            //    .ticks(test.length)\r\n        }\r\n\r\n        xAxis = d3.svg.axis()\r\n            .scale(x)\r\n            .orient(\"bottom\")\r\n        //  .tickFormat('');\r\n\r\n        yAxis = d3.svg.axis()\r\n            .scale(y)\r\n            .orient(\"left\")\r\n\r\n        //  .tickFormat('');\r\n\r\n        y.domain(test.map(function (d) {\r\n            return d.key;\r\n        }));\r\n        x.domain([0, d3.max(test, function (d) {\r\n            return +d.value.total;\r\n        })]);\r\n\r\n\r\n        xAxe = svg.append(\"g\");\r\n\r\n        xAxe\r\n            .transition()\r\n            .duration(750)\r\n            .call(xAxis);\r\n        xAxe\r\n            .attr(\"class\", \"x axis\")\r\n            .attr(\"transform\", \"translate(0,\" + (width + 130) + \")\")\r\n            .selectAll(\"text\")\r\n            .style(\"text-anchor\", \"end\")\r\n            .attr(\"dx\", \"-.4em\")\r\n            .attr(\"dy\", \".35em\")\r\n            .attr(\"transform\", \"rotate(-45)\");\r\n\r\n\r\n        yAxe = svg.append(\"g\");\r\n\r\n        yAxe\r\n            .transition()\r\n            .duration(750)\r\n            .call(yAxis);\r\n\r\n\r\n        yAxe\r\n            .attr(\"class\", \"y axis\")\r\n            .append(\"text\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .attr(\"y\", 0)\r\n            .attr(\"dy\", \".71em\")\r\n            .style(\"text-anchor\", \"end\");\r\n\r\n\r\n        grid = svg.append(\"g\")\r\n            .attr(\"class\", \"grid\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n\r\n\r\n        grid\r\n            .transition()\r\n            .duration(750)\r\n            .call(make_x_axis()\r\n                .tickSize(-height, 0, 0)\r\n                .tickFormat(\"\")\r\n        );\r\n\r\n\r\n        grid2 = svg.append(\"g\")\r\n            .attr(\"class\", \"grid\")\r\n            .attr(\"transform\", \"translate(0,13)\")\r\n\r\n\r\n        grid2\r\n            .transition()\r\n            .duration(750)\r\n            .call(make_y_axis()\r\n                .tickSize(-width, 0, 0)\r\n                .tickFormat(\"\")\r\n        )\r\n\r\n            makeBars(test, drill, userFunctionstack);\r\n\r\n\r\n        svg.selectAll(\"g.bar\")\r\n            .data(test)\r\n            .enter().append(\"text\")\r\n            .attr(\"class\", \"labels\")\r\n            .text(function (d) {\r\n                var k = d.key.split(\" \");\r\n                return k[0];\r\n            })\r\n            .attr(\"x\", width)\r\n            .attr(\"y\", function (d) {\r\n                return y(d.key);\r\n            })\r\n            .attr(\"transform\", \"translate(0,15)\")\r\n            .attr(\"fill\", \"#cccccc\")\r\n\r\n\r\n        var legend = svg.append(\"g\")\r\n            .attr(\"class\", \"legend\")\r\n            .attr(\"transform\", \"translate(\" + 620 + \",30)\")\r\n            .style(\"font-size\", \"20px\")\r\n            .attr(\"stroke\", \"#999999\")\r\n            .attr(\"data-style-padding\", 10)\r\n            .attr(\"fill\", \"white\")\r\n            .call(d3.legend);\r\n\r\n\r\n    }\r\n\r\n    function drill(e) {\r\n        grid.remove();\r\n        grid2.remove();\r\n        svg.selectAll(\".enter\").transition().duration(750).ease(\"linear\").attr(\"width\", 0).attr(\"x\", 0).each(\"end\", function () {\r\n            d3.select(this).remove();\r\n        });\r\n        svg.selectAll(\".group\").remove();\r\n        svg.selectAll(\".legend\").remove();\r\n        svg.selectAll(\".dates\").remove();\r\n        svg.selectAll(\".labels\").remove();\r\n        svg.selectAll(\".x axis\").remove();\r\n        svg.selectAll(\".y axis\").remove();\r\n        //var parseDate = d3.time.format(\"%B-%d-%Y\").parse;\r\n\r\n\r\n        var keyStr = e.key;\r\n        var keySplit = keyStr.split(\" \");\r\n\r\n        var mDateStr = keySplit[1];\r\n        var groupStr = keySplit[0];\r\n        currGroup = groupStr;\r\n       // console.log(\"strings: \" + keySplit);\r\n        var mNodes = createDateNodes(currentNodes);\r\n        mNodes = mNodes[groupStr];\r\n\r\n\r\n        //Display the app Group at the top\r\n        svg.append(\"g\").append(\"text\").text(groupStr).attr(\"class\", \"group\");\r\n\r\n        mNodes = d3.entries(mNodes);\r\n\r\n        mNodes.forEach(function (d) {\r\n            var f = moment(d.key, \"YYYY/MM/DD\");\r\n            d.key = Date.parse(f);\r\n        })\r\n\r\n        //sort\r\n        mNodes.sort(function (a, b) {\r\n            var akey = new Date(a.key), bkey = new Date(b.key);\r\n            return akey - bkey;\r\n        })\r\n       // console.log(d3.keys(mNodes));\r\n        y = d3.scale.ordinal()\r\n            .domain(mNodes.map(function (d) {\r\n                return new Date(d.key);\r\n            }))\r\n            .rangeRoundBands([height, 0], .05);\r\n        //y = d3.time.scale.domain([height, 0], .05);\r\n        x = d3.scale.linear().range([0, width]);\r\n\r\n        function make_x_axis() {\r\n            return d3.svg.axis()\r\n                .scale(x)\r\n                .orient(\"bottom\")\r\n            // .ticks(\"\")\r\n        }\r\n\r\n        function make_y_axis() {\r\n            return d3.svg.axis()\r\n                .scale(y)\r\n                .orient(\"left\")\r\n                .ticks(mNodes.length)\r\n        }\r\n\r\n        var xAxis = d3.svg.axis()\r\n            .scale(x)\r\n            .orient(\"bottom\");\r\n\r\n\r\n        var yAxis = d3.svg.axis()\r\n            .scale(y)\r\n            .orient(\"left\")\r\n            .ticks(mNodes.length)\r\n            .tickFormat(d3.time.format(\"%B-%d-%Y\"));\r\n\r\n\r\n        x.domain([0, d3.max(mNodes, function (d) {\r\n            return +d.value.total;\r\n        })]);\r\n\r\n        xAxe\r\n            .transition()\r\n            .duration(750)\r\n            .call(xAxis);\r\n\r\n        xAxe\r\n            .attr(\"class\", \"x axis\")\r\n            .attr(\"transform\", \"translate(0,\" + (width + 130) + \")\")\r\n            //.call(xAxis)\r\n            .selectAll(\"text\")\r\n            .style(\"text-anchor\", \"end\")\r\n            .attr(\"dx\", \"-.4em\")\r\n            .attr(\"dy\", \".35em\")\r\n            .attr(\"transform\", \"rotate(-45)\");\r\n\r\n        yAxe\r\n            .transition()\r\n            .duration(750)\r\n            .call(yAxis);\r\n        yAxe\r\n            .attr(\"class\", \"y axis\")\r\n            //.call(yAxis)\r\n            .append(\"text\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .attr(\"y\", 0)\r\n            .attr(\"dy\", \".71em\")\r\n            .style(\"text-anchor\", \"end\");\r\n\r\n\r\n        grid3 = svg.append(\"g\")\r\n            .attr(\"class\", \"grid\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n\r\n        grid3\r\n            .transition()\r\n            .duration(750)\r\n            .call(make_x_axis()\r\n                .tickSize(-height, 0, 0)\r\n                .tickFormat(\"\")\r\n        );\r\n\r\n        grid4 = svg.append(\"g\")\r\n            .attr(\"class\", \"grid\")\r\n            .attr(\"transform\", \"translate(0, 0)\")\r\n\r\n        grid4\r\n            .transition()\r\n            .duration(750)\r\n            .call(make_y_axis()\r\n                .tickSize(-width, 0, 0)\r\n                .tickFormat(\"\")\r\n        );\r\n        makeBars(mNodes, userFunctionstack2[3], userFunctionstack2);\r\n\r\n//        bars = svg.selectAll(\"bars\")\r\n//            .data(mNodes);\r\n//\r\n//        bars\r\n//            .enter().append(\"rect\")\r\n//            .attr(\"class\", \"exit\")\r\n//            .style(\"fill\", \"#009999\")\r\n//            .attr(\"y\", function (d) {\r\n//                console.log('y: ' + d.key);\r\n//                return y(new Date(d.key));\r\n//            })\r\n//            .attr(\"height\", y.rangeBand())\r\n//            .attr(\"x\", 0)\r\n//            .attr(\"width\", 0)\r\n//            .attr(\"data-legend\", \"Untested Lines\")\r\n//            .on(\"click\", function(d){return drillDeeper(d);})\r\n//            .on('mouseover', tip.show)\r\n//            .on('mouseout', tip.hide);\r\n//\r\n//        bars\r\n//            .transition()\r\n//            .duration(750)\r\n//            .attr(\"x\", 0)\r\n//            .attr(\"width\", function (d) {\r\n//                return x((+d.value.total) - (+d.value.tested));\r\n//            })\r\n//\r\n//        bars.exit()\r\n//            .remove();\r\n//\r\n//        bars\r\n//            .enter().append(\"rect\")\r\n//            .attr(\"class\", \"exit\")\r\n//            .style(\"fill\", \"#99FF66\")\r\n//            .attr(\"y\", function (d) {\r\n//                return y(new Date(d.key));\r\n//            })\r\n//            .attr(\"height\", y.rangeBand())\r\n//            .attr(\"x\", 0)\r\n//            .attr(\"width\", 0)\r\n//            .attr(\"data-legend\", \"Tested Lines\")\r\n//            .on(\"click\", function(d){return drillDeeper(d);})\r\n//            .on('mouseover', tip2.show)\r\n//            .on('mouseout', tip2.hide);\r\n//\r\n//        bars\r\n//            .transition()\r\n//            .duration(750)\r\n//            .attr(\"x\", function (d) {\r\n//                return x((+d.value.total) - (+d.value.tested));\r\n//            })\r\n//            .attr(\"width\", function (d) {\r\n//                return x(+d.value.tested);\r\n//            })\r\n//\r\n//        bars.exit()\r\n//            .remove();\r\n//\r\n//        svg.selectAll(\"apps\")\r\n//            .data(mNodes)\r\n//            .enter().append(\"text\")\r\n//            .attr(\"x\", function (d) {\r\n//                return x((d.value.total) - (d.value.tested));\r\n//            })\r\n//            .attr(\"y\", function (d) {\r\n//                return y(d.key);\r\n//            })\r\n//            .attr(\"text-anchor\", \"middle\")\r\n//            .attr('class', 'apps')\r\n//            .text(function (d) {\r\n//                return d.value.app_group\r\n//            });\r\n\r\n        var legend = svg.append(\"g\")\r\n            .attr(\"class\", \"legend\")\r\n            .attr(\"transform\", \"translate(\" + 620 + \",30)\")\r\n            .style(\"font-size\", \"20px\")\r\n            .attr(\"stroke\", \"#999999\")\r\n            .attr(\"data-style-padding\", 10)\r\n            .attr(\"fill\", \"white\")\r\n            .call(d3.legend);\r\n\r\n\r\n    }\r\n    function drillDeeper(bar) {\r\n        grid3.remove();\r\n        grid4.remove();\r\n        svg.selectAll(\".enter\").transition().duration(750).ease(\"linear\").attr(\"width\", 0).attr(\"x\", 0).each(\"end\", function () {\r\n            d3.select(this).remove();\r\n        });\r\n        svg.selectAll(\".exit\").transition().duration(750).ease(\"linear\").attr(\"width\", 0).attr(\"x\", 0).each(\"end\", function () {\r\n            d3.select(this).remove();\r\n        });\r\n        svg.selectAll(\".group\").remove();\r\n        svg.selectAll(\".dates\").remove();\r\n        svg.selectAll(\".legend\").remove();\r\n        svg.selectAll(\".labels\").remove();\r\n        svg.selectAll(\".x axis\").remove();\r\n        svg.selectAll(\".y axis\").remove();\r\n        //var parseDate = d3.time.format(\"%B-%d-%Y\").parse;\r\n        console.log(\"strings: \" + bar);\r\n        //var formatter = d3.format(\".0%\");\r\n        var color = d3.scale.category10();\r\n\r\n        var keyStr = bar;\r\n        var dateF = d3.time.format(\"%B-%d-%Y\");\r\n\r\n\r\n        var mDateStr = new Date(bar.key);\r\n        mDateStr = dateF(mDateStr);\r\n        var groupStr = keyStr[0];\r\n\r\n        var mNodes = createAllNodes(currentNodes);\r\n        //mNodes = mNodes[groupStr];\r\n        //Display the app Group at the top\r\n        svg.append(\"g\").append(\"text\").text(currGroup + \" Application Breakdown: \" + mDateStr).attr(\"class\", \"group\");\r\n\r\n        //Display the app Group at the top\r\n        svg.append(\"g\").append(\"text\").text(groupStr).attr(\"class\", \"group\");\r\n\r\n        mNodes = d3.values(mNodes);\r\n\r\n      //  console.log(\"nodes: \" + mNodes);\r\n\r\n        mNodes.forEach(function (d) {\r\n            d.value.color = color(d.key)\r\n\r\n        })\r\n\r\n        y = d3.scale.ordinal()\r\n            .domain(mNodes.map(function (d) {\r\n                return d.key;\r\n            }))\r\n            .rangeRoundBands([height, 0], .05);\r\n        //y = d3.time.scale.domain([height, 0], .05);\r\n        x = d3.scale.linear().range([0, width]);\r\n\r\n        function make_x_axis() {\r\n            return d3.svg.axis()\r\n                .scale(x)\r\n                .orient(\"bottom\")\r\n\r\n        }\r\n\r\n        function make_y_axis() {\r\n            return d3.svg.axis()\r\n                .scale(y)\r\n                .orient(\"left\")\r\n                .ticks(mNodes.length)\r\n        }\r\n\r\n        var xAxis = d3.svg.axis()\r\n            .scale(x)\r\n            .orient(\"bottom\")\r\n\r\n\r\n\r\n        var yAxis = d3.svg.axis()\r\n                .scale(y)\r\n                .orient(\"left\")\r\n                .ticks(mNodes.length)\r\n            ;\r\n\r\n\r\n        x.domain([0, d3.max(mNodes,function(d){return d.value.total})]);\r\n\r\n\r\n        xAxe\r\n            .transition()\r\n            .duration(750)\r\n            .call(xAxis);\r\n\r\n        xAxe\r\n            .attr(\"class\", \"x axis\")\r\n            .attr(\"transform\", \"translate(0,\" + (width + 130) + \")\")\r\n            //.call(xAxis)\r\n            .selectAll(\"text\")\r\n            .style(\"text-anchor\", \"end\")\r\n            .attr(\"dx\", \"-.4em\")\r\n            .attr(\"dy\", \".35em\")\r\n            .attr(\"transform\", \"rotate(-45)\");\r\n\r\n        yAxe\r\n            .transition()\r\n            .duration(750)\r\n            .call(yAxis);\r\n        yAxe\r\n            .attr(\"class\", \"y axis\")\r\n            //.call(yAxis)\r\n            .append(\"text\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .attr(\"y\", 0)\r\n            .attr(\"dy\", \".71em\")\r\n            .style(\"text-anchor\", \"end\");\r\n\r\n\r\n        grid3 = svg.append(\"g\")\r\n            .attr(\"class\", \"grid\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n\r\n        grid3\r\n            .transition()\r\n            .duration(750)\r\n            .call(make_x_axis()\r\n                .tickSize(-height, 0, 0)\r\n                .tickFormat(\"\")\r\n        );\r\n\r\n        grid4 = svg.append(\"g\")\r\n            .attr(\"class\", \"grid\")\r\n            .attr(\"transform\", \"translate(0, 0)\")\r\n\r\n        grid4\r\n            .transition()\r\n            .duration(750)\r\n            .call(make_y_axis()\r\n                .tickSize(-width, 0, 0)\r\n                .tickFormat(\"\")\r\n        );\r\n\r\n      //  makeBars(mNodes, createGroupNodes, userFunctionstack);\r\n\r\n        bars = svg.selectAll(\"bars\")\r\n            .data(mNodes);\r\n\r\n        bars\r\n            .enter().append(\"rect\")\r\n            .attr(\"class\", \"exit\")\r\n            .style(\"fill\", function(d){return d.value.color;})\r\n            .attr(\"y\", function (d) {\r\n              //  console.log('y: ' + d.key);\r\n                return y(d.key);\r\n            })\r\n            .attr(\"height\", y.rangeBand())\r\n            .attr(\"x\", 0)\r\n            .attr(\"width\", 0)\r\n            .attr(\"data-legend\", \"Tested Lines\")\r\n            .on(\"click\", createGroupNodes)\r\n            .on(\"mouseover\", function (d) {\r\n                tiper.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n                tiper\r\n                    .transition()\r\n                    .duration(200)\r\n                    .style(\"opacity\", .9)\r\n                tiper.html('<p> Tested Lines: ' +  d.value.tested +'</p>')\r\n                    .style(\"left\", (d3.event.pageX) + \"px\")\r\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\r\n            })\r\n            .on(\"mouseout\", hideTip)\r\n\r\n        bars\r\n            .transition()\r\n            .duration(750)\r\n            .attr(\"x\", 0)\r\n            .attr(\"width\", function (d) {\r\n                return x(+d.value.tested);\r\n            })\r\n\r\n        bars.exit()\r\n            .remove();\r\n\r\n        svg\r\n            .append('defs')\r\n            .append('pattern')\r\n            .attr('id', 'diagonalHatch')\r\n            .attr('patternUnits', 'userSpaceOnUse')\r\n            .attr('width', 4)\r\n            .attr('height', 4)\r\n            .append('path')\r\n            .attr('d', 'M-1,1 l2,-2 M0,4 l4,-4 M3,5 l2,-2')\r\n            .attr('stroke', '#000000')\r\n            .attr('stroke-width',1)\r\n\r\n        bars\r\n            .enter().append(\"rect\")\r\n            .attr(\"class\", \"exit\")\r\n            .style(\"fill\", function(d){return d.value.color;})\r\n            .attr(\"y\", function (d) {\r\n                return y(d.key);\r\n            })\r\n            .style('fill', 'url(#diagonalHatch)')\r\n            .attr(\"height\", y.rangeBand())\r\n            .attr(\"x\", 0)\r\n            .attr(\"width\", 0)\r\n            .attr(\"data-legend\", \"Untested Lines\")\r\n            .on(\"click\", createGroupNodes)\r\n            .on(\"mouseover\", function (d) {\r\n                tiper.transition()\r\n                    .duration(500)\r\n                    .style(\"opacity\", 0)\r\n                tiper\r\n                    .transition()\r\n                    .duration(200)\r\n                    .style(\"opacity\", .9)\r\n                tiper.html('<p> Untested Lines: ' + (d.value.total - d.value.tested) +'</p>')\r\n                    .style(\"left\", (d3.event.pageX) + \"px\")\r\n                    .style(\"top\", (d3.event.pageY - 28) + \"px\");\r\n            })\r\n            .on(\"mouseout\", hideTip)\r\n\r\n        bars\r\n            .transition()\r\n            .duration(750)\r\n            .attr(\"x\", function (d) {\r\n                return x(+d.value.tested);\r\n            })\r\n            .attr(\"width\", function (d) {\r\n                return x((+d.value.total) - (+d.value.tested));\r\n            })\r\n\r\n        bars.exit()\r\n            .remove();\r\n\r\n\r\n\r\n        var legend = svg.append(\"g\")\r\n            .attr(\"class\", \"legend\")\r\n            .attr(\"transform\", \"translate(\" + 620 + \",30)\")\r\n            .style(\"font-size\", \"20px\")\r\n            .attr(\"stroke\", \"#999999\")\r\n            .attr(\"data-style-padding\", 10)\r\n            .attr(\"fill\", \"white\")\r\n            .call(d3.legend);\r\n\r\n       legend.exit()\r\n            .remove();\r\n\r\n\r\n\r\n    }\r\n    function dateMenu() {\r\n        //make menu for date select\r\n        mDate.sort(function (a, b) {\r\n            var f = moment(a, \"MMMM-DD-YYYY\");\r\n            var g = moment(b, \"MMMM-DD-YYYY\");\r\n          //  console.log(\"date:\" + f + \" \" + g);\r\n            return f - g;\r\n        })\r\n        var lines1 = d3.selectAll(\"#date-nav-list\").selectAll(\"ul\")\r\n            .data(mDate);\r\n\r\n        lines1.enter().append(\"li\").append(\"a\")\r\n            .attr(\"href\", \"#\")\r\n            .text(function (d) {\r\n                return d;\r\n            })\r\n            .on(\"click\", currDate);\r\n\r\n        lines1.exit().remove();\r\n        var lines2 = d3.selectAll(\"#date-nav-list2\").selectAll(\"ul\")\r\n            .data(mDate);\r\n\r\n        lines2.enter().append(\"li\").append(\"a\")\r\n            .attr(\"href\", \"#\")\r\n            .text(function (d) {\r\n                return d;\r\n            })\r\n            .on(\"click\", sixM);\r\n\r\n        lines2.exit().remove();\r\n        var lines3 = d3.selectAll(\"#date-nav-list3\").selectAll(\"ul\")\r\n            .data(mDate);\r\n\r\n        lines3.enter().append(\"li\").append(\"a\")\r\n            .attr(\"href\", \"#\")\r\n            .text(function (d) {\r\n                return d;\r\n            })\r\n            .on(\"click\", oneY);\r\n\r\n\r\n        lines3.exit().remove();\r\n\r\n        var sub = d3.selectAll(\".submit\");\r\n\r\n        sub.on(\"click\", createGroupNodes);\r\n\r\n        var res = d3.selectAll(\".reset\");\r\n\r\n        res.on(\"click\", reset);\r\n    }\r\n\r\n    function reset() {\r\n        textBox.selectAll(\".three\").remove();\r\n        textBox.selectAll(\".two\").remove();\r\n        textBox.selectAll(\".one\").remove();\r\n        instructions();\r\n        currentDate = 0;\r\n        sixMos = 0;\r\n        oneYear = 0;\r\n        createGroupNodes();\r\n    }\r\n\r\n    //node object superclass\r\n    function Node() {\r\n        this.id = \"\";\r\n        this.name = \"\";\r\n        this.colors = \"\";\r\n        this.app_group = \"\";\r\n        this.line_total = 0;\r\n        this.percent = 0.0;\r\n        this.line_tested = 0;\r\n        this.pass = 0;\r\n        this.date = new Date();\r\n\r\n    }\r\n\r\n    /*\r\n     function showGroups() {\r\n     //var data = currentNodes;\r\n     var c_data = l_nodes;\r\n\r\n     */\r\n\r\n    //makeMenu(c_data);\r\n\r\n\r\n    /*        function makeMenu(mData) {\r\n     //make menu for date select\r\n     var lines = d3.selectAll(\"#date-nav-list\").selectAll(\"ul\")\r\n     .data(mData, function (d, i) {\r\n     return d.date;\r\n     });\r\n\r\n\r\n     lines.enter().append(\"li\").append(\"a\")\r\n     .attr(\"href\", \"#\")\r\n     .text(function (d) {\r\n     return d.date;\r\n     })\r\n     .on(\"click\", dateNode);\r\n     lines.exit().remove();\r\n\r\n     }*/\r\n    /*\r\n     function dateNode() {\r\n     console.log(currDate);\r\n     //make sure if user selects a app_group it shows data from the correct cat.\r\n     var type = this.parentNode.parentNode.parentNode;\r\n     type = type.children[0].innerHTML;\r\n     //console.log(type);\r\n     //pass the current cat. to the nodeSwitcher\r\n     my_mod.setView(type);\r\n     //switch nodes if necessary\r\n     //nodeSwitcher();\r\n     var mData = currentNodes;\r\n     var groupNodes = [];\r\n     var groupNode = new Node();\r\n     var mDate = this.innerHTML;\r\n     setDate(mDate);\r\n     //isolate the nodes by app_group\r\n     //select only the nodes of the chosen app_group and pass to dataChange()\r\n     for (var i = 0; i < mData.length; i++) {\r\n\r\n     if (mData[i].date == mDate) {\r\n     groupNode = mData[i];\r\n     groupNodes.push(groupNode);\r\n\r\n     }\r\n     //console.log(groupNodes);\r\n     }\r\n     dataChange(groupNodes);\r\n\r\n     }*/\r\n\r\n    /*        function setDate(date) {\r\n     //TODO create a date function that maintains the nodes date through switching from app_group view to app view\r\n     //until a new date is selected, maybe try a string to store the curr date globally\r\n     currDate = date;\r\n     var lines = d3.selectAll(\"#vis\").selectAll(\"h3\")\r\n     .text(currDate);\r\n\r\n\r\n     lines.exit;\r\n     return currDate;\r\n     }\r\n\r\n     }*/\r\n\r\n    var my_mod = {};\r\n    my_mod.init = function (_data) {\r\n        //console.log('raw data'+_data);\r\n        custom_chart(_data);\r\n        //nodeSwitcher();\r\n        //showGroups();\r\n    };\r\n\r\n\r\n    return my_mod;\r\n\r\n})(d3, CustomTooltip);\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}